From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bastien Nocera <hadess@hadess.net>
Date: Thu, 7 Jan 2021 12:46:34 +0100
Subject: [PATCH] gweather: Only use 4 significant decimals for locations

1/1000th of a degree of longitude or latitude corresponds to around
100 meters. There's no reason for the weather to be any more precise
than this.

See https://www.thoughtco.com/degree-of-latitude-and-longitude-distance-4070616

Closes: #69
---
 libgweather/gweather-private.c | 21 ++++++++++++++++-----
 libgweather/gweather-private.h |  3 +++
 libgweather/test_libgweather.c | 16 ++++++++++++++++
 libgweather/weather-iwin.c     |  7 ++++---
 libgweather/weather-owm.c      |  7 ++++---
 libgweather/weather-yrno.c     |  7 ++++---
 6 files changed, 47 insertions(+), 14 deletions(-)

diff --git a/libgweather/gweather-private.c b/libgweather/gweather-private.c
index b214ad95..0ccc21b3 100644
--- a/libgweather/gweather-private.c
+++ b/libgweather/gweather-private.c
@@ -22,8 +22,19 @@
 
 #include "gweather-private.h"
 
-/*
-  There is no code here: the purpose of this header is so that
-  gnome-builder knows how to pick up the include flags to parse
-  gweather-private.h properly.
-*/
+/* sign, 3 digits, separator, 4 decimals, nul-char */
+#define DEGREES_STR_SIZE (1 + 3 + 1 + 4 + 1)
+
+char *
+_radians_to_degrees_str (gdouble radians)
+{
+  char *str;
+  double degrees;
+
+  str = g_malloc0 (DEGREES_STR_SIZE);
+  /* Max 4 decimals */
+  degrees = (double) ((int) (RADIANS_TO_DEGREES (radians) * 10000)) / 10000;
+  /* Too many digits */
+  g_return_val_if_fail (degrees <= 1000 || degrees >= -1000, NULL);
+  return g_ascii_formatd (str, G_ASCII_DTOSTR_BUF_SIZE, "%g", degrees);
+}
diff --git a/libgweather/gweather-private.h b/libgweather/gweather-private.h
index ddf0a41a..be73768e 100644
--- a/libgweather/gweather-private.h
+++ b/libgweather/gweather-private.h
@@ -167,6 +167,9 @@ struct _GWeatherInfoPrivate {
 #define RADIANS_TO_DEGREES(rad)		((rad) * 180. / M_PI)
 #define RADIANS_TO_HOURS(rad)		((rad) * 12. / M_PI)
 
+GWEATHER_EXTERN
+char           *_radians_to_degrees_str (gdouble radians);
+
 /*
  * Planetary Mean Orbit and their progressions from J2000 are based on the
  * values in http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf
diff --git a/libgweather/test_libgweather.c b/libgweather/test_libgweather.c
index 8a219115..e0e4b815 100644
--- a/libgweather/test_libgweather.c
+++ b/libgweather/test_libgweather.c
@@ -26,6 +26,7 @@
 #include <gweather-version.h>
 #include "gweather-location.h"
 #include "gweather-weather.h"
+#include "gweather-private.h"
 
 extern void _gweather_location_reset_world (void);
 
@@ -758,28 +759,43 @@ test_weather_loop_use_after_free (void)
     g_main_loop_unref (loop);
 }
 
+static void
+test_radians_to_degrees_str (void)
+{
+    char long_version[G_ASCII_DTOSTR_BUF_SIZE];
+    g_autofree char *short_version = NULL;
+    double coord = 1.260765526077;
+
+    g_ascii_dtostr (long_version, G_ASCII_DTOSTR_BUF_SIZE, RADIANS_TO_DEGREES (coord));
+    short_version = _radians_to_degrees_str (coord);
+
+    g_assert_cmpint (strlen (long_version), >, strlen (short_version));
+    g_assert_cmpstr (short_version, ==, "72.2365");
+}
+
 static void
 log_handler (const char *log_domain, GLogLevelFlags log_level, const char *message, gpointer user_data)
 {
 	g_print ("%s\n", message);
 }
 
 int
 main (int argc, char *argv[])
 {
 	setlocale (LC_ALL, "");
 
 	g_test_init (&argc, &argv, NULL);
 	g_test_bug_base ("http://gitlab.gnome.org/GNOME/libgweather/issues/");
 
 	/* We need to handle log messages produced by g_message so they're interpreted correctly by the GTester framework */
 	g_log_set_handler (NULL, G_LOG_LEVEL_MESSAGE | G_LOG_LEVEL_INFO | G_LOG_LEVEL_DEBUG, log_handler, NULL);
 
 	g_setenv ("LIBGWEATHER_LOCATIONS_PATH",
 		  TEST_SRCDIR "../data/Locations.xml",
 		  FALSE);
 	set_gsettings ();
 
+	g_test_add_func ("/weather/radians-to-degrees_str", test_radians_to_degrees_str);
 	g_test_add_func ("/weather/named-timezones", test_named_timezones);
 	g_test_add_func ("/weather/named-timezones-deserialized", test_named_timezones_deserialized);
 	g_test_add_func ("/weather/no-code-serialize", test_no_code_serialize);
diff --git a/libgweather/weather-iwin.c b/libgweather/weather-iwin.c
index c3d414de..71020396 100644
--- a/libgweather/weather-iwin.c
+++ b/libgweather/weather-iwin.c
@@ -353,31 +353,32 @@ iwin_start_open (GWeatherInfo *info)
     SoupMessage *msg;
     struct tm tm;
     time_t now;
-    gchar latstr[G_ASCII_DTOSTR_BUF_SIZE], lonstr[G_ASCII_DTOSTR_BUF_SIZE];
+    g_autofree char *latstr = NULL;
+    g_autofree char *lonstr = NULL;
 
     g_assert (info != NULL);
 
     priv = info->priv;
     loc = &priv->location;
 
     /* No zone (or -) means no weather information from national offices.
        We don't actually use zone, but it's a good indicator of a US location.
        (@ and : prefixes were used in the past for Australia and UK) */
     if (!loc->zone || loc->zone[0] == '-' || loc->zone[0] == '@' || loc->zone[0] == ':') {
         g_debug ("iwin_start_open, ignoring location %s because zone '%s' has no weather info",
                  loc->name, loc->zone ? loc->zone : "(empty)");
         return FALSE;
     }
 
     if (!loc->latlon_valid)
 	return FALSE;
 
     /* see the description here: http://www.weather.gov/forecasts/xml/ */
     now = time (NULL);
     localtime_r (&now, &tm);
 
-    g_ascii_dtostr (latstr, sizeof(latstr), RADIANS_TO_DEGREES (loc->latitude));
-    g_ascii_dtostr (lonstr, sizeof(lonstr), RADIANS_TO_DEGREES (loc->longitude));
+    latstr = _radians_to_degrees_str (loc->latitude);
+    lonstr = _radians_to_degrees_str (loc->longitude);
     url = g_strdup_printf ("https://www.weather.gov/forecasts/xml/sample_products/browser_interface/ndfdBrowserClientByDay.php?&lat=%s&lon=%s&format=24+hourly&startDate=%04d-%02d-%02d&numDays=7",
 			   latstr, lonstr, 1900 + tm.tm_year, 1 + tm.tm_mon, tm.tm_mday);
     g_debug ("iwin_start_open, requesting: %s", url);
diff --git a/libgweather/weather-owm.c b/libgweather/weather-owm.c
index a58950c9..eb45f52f 100644
--- a/libgweather/weather-owm.c
+++ b/libgweather/weather-owm.c
@@ -428,18 +428,19 @@ owm_start_open (GWeatherInfo *info)
     gchar *url;
     SoupMessage *message;
     WeatherLocation *loc;
-    gchar latstr[G_ASCII_DTOSTR_BUF_SIZE], lonstr[G_ASCII_DTOSTR_BUF_SIZE];
+    g_autofree char *latstr = NULL;
+    g_autofree char *lonstr = NULL;
 
     priv = info->priv;
     loc = &priv->location;
 
     if (!loc->latlon_valid)
 	return FALSE;
 
     /* see the description here: http://bugs.openweathermap.org/projects/api/wiki/Api_2_5_forecast */
 
-    g_ascii_dtostr (latstr, sizeof(latstr), RADIANS_TO_DEGREES (loc->latitude));
-    g_ascii_dtostr (lonstr, sizeof(lonstr), RADIANS_TO_DEGREES (loc->longitude));
+    latstr = _radians_to_degrees_str (loc->latitude);
+    lonstr = _radians_to_degrees_str (loc->longitude);
 
 #define TEMPLATE_START "https://api.openweathermap.org/data/2.5/forecast?lat=%s&lon=%s&mode=xml&units=metric"
 #ifdef OWM_APIKEY
diff --git a/libgweather/weather-yrno.c b/libgweather/weather-yrno.c
index 7c89df2a..ef6d188b 100644
--- a/libgweather/weather-yrno.c
+++ b/libgweather/weather-yrno.c
@@ -435,18 +435,19 @@ yrno_start_open (GWeatherInfo *info)
     gchar *url;
     SoupMessage *message;
     WeatherLocation *loc;
-    gchar latstr[G_ASCII_DTOSTR_BUF_SIZE], lonstr[G_ASCII_DTOSTR_BUF_SIZE];
+    g_autofree char *latstr = NULL;
+    g_autofree char *lonstr = NULL;
 
     priv = info->priv;
     loc = &priv->location;
 
     if (!loc->latlon_valid)
 	return FALSE;
 
     /* see the description here: https://api.met.no/weatherapi/locationforecast/2.0/documentation */
 
-    g_ascii_dtostr (latstr, sizeof(latstr), RADIANS_TO_DEGREES (loc->latitude));
-    g_ascii_dtostr (lonstr, sizeof(lonstr), RADIANS_TO_DEGREES (loc->longitude));
+    latstr = _radians_to_degrees_str (loc->latitude);
+    lonstr = _radians_to_degrees_str (loc->longitude);
 
     url = g_strdup_printf("https://" API_ENDPOINT_DOMAIN "/weatherapi/locationforecast/2.0/classic?lat=%s&lon=%s", latstr, lonstr);
     g_debug ("yrno_start_open, requesting: %s", url);
